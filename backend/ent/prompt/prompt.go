// Code generated by ent, DO NOT EDIT.

package prompt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the prompt type in the database.
	Label = "prompt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldVotes holds the string denoting the votes field in the database.
	FieldVotes = "votes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// EdgeConversations holds the string denoting the conversations edge name in mutations.
	EdgeConversations = "conversations"
	// Table holds the table name of the prompt in the database.
	Table = "prompts"
	// ConversationsTable is the table that holds the conversations relation/edge.
	ConversationsTable = "conversations"
	// ConversationsInverseTable is the table name for the Conversation entity.
	// It exists in this package in order to avoid circular dependency with the "conversation" package.
	ConversationsInverseTable = "conversations"
	// ConversationsColumn is the table column denoting the conversations relation/edge.
	ConversationsColumn = "prompt_conversations"
)

// Columns holds all SQL columns for prompt fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContent,
	FieldCategory,
	FieldVotes,
	FieldCreatedAt,
	FieldCreatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultVotes holds the default value on creation for the "votes" field.
	DefaultVotes int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Prompt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByVotes orders the results by the votes field.
func ByVotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByConversationsCount orders the results by conversations count.
func ByConversationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConversationsStep(), opts...)
	}
}

// ByConversations orders the results by conversations terms.
func ByConversations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConversationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConversationsTable, ConversationsColumn),
	)
}
