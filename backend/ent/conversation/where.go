// Code generated by ent, DO NOT EDIT.

package conversation

import (
	"prompt-library/backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldID, id))
}

// Messages applies equality check predicate on the "messages" field. It's identical to MessagesEQ.
func Messages(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldMessages, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldCreatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldUserID, v))
}

// MessagesEQ applies the EQ predicate on the "messages" field.
func MessagesEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldMessages, v))
}

// MessagesNEQ applies the NEQ predicate on the "messages" field.
func MessagesNEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldMessages, v))
}

// MessagesIn applies the In predicate on the "messages" field.
func MessagesIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldMessages, vs...))
}

// MessagesNotIn applies the NotIn predicate on the "messages" field.
func MessagesNotIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldMessages, vs...))
}

// MessagesGT applies the GT predicate on the "messages" field.
func MessagesGT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldMessages, v))
}

// MessagesGTE applies the GTE predicate on the "messages" field.
func MessagesGTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldMessages, v))
}

// MessagesLT applies the LT predicate on the "messages" field.
func MessagesLT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldMessages, v))
}

// MessagesLTE applies the LTE predicate on the "messages" field.
func MessagesLTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldMessages, v))
}

// MessagesContains applies the Contains predicate on the "messages" field.
func MessagesContains(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContains(FieldMessages, v))
}

// MessagesHasPrefix applies the HasPrefix predicate on the "messages" field.
func MessagesHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasPrefix(FieldMessages, v))
}

// MessagesHasSuffix applies the HasSuffix predicate on the "messages" field.
func MessagesHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasSuffix(FieldMessages, v))
}

// MessagesEqualFold applies the EqualFold predicate on the "messages" field.
func MessagesEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEqualFold(FieldMessages, v))
}

// MessagesContainsFold applies the ContainsFold predicate on the "messages" field.
func MessagesContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContainsFold(FieldMessages, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Conversation {
	return predicate.Conversation(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(sql.FieldContainsFold(FieldUserID, v))
}

// HasPrompt applies the HasEdge predicate on the "prompt" edge.
func HasPrompt() predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PromptTable, PromptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPromptWith applies the HasEdge predicate on the "prompt" edge with a given conditions (other predicates).
func HasPromptWith(preds ...predicate.Prompt) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := newPromptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(sql.NotPredicates(p))
}
