// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"prompt-library/backend/ent/conversation"
	"prompt-library/backend/ent/predicate"
	"prompt-library/backend/ent/prompt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cu *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetMessages sets the "messages" field.
func (cu *ConversationUpdate) SetMessages(s string) *ConversationUpdate {
	cu.mutation.SetMessages(s)
	return cu
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableMessages(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetMessages(*s)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ConversationUpdate) SetCreatedAt(t time.Time) *ConversationUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableCreatedAt(t *time.Time) *ConversationUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *ConversationUpdate) SetUserID(s string) *ConversationUpdate {
	cu.mutation.SetUserID(s)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableUserID(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetUserID(*s)
	}
	return cu
}

// SetPromptID sets the "prompt" edge to the Prompt entity by ID.
func (cu *ConversationUpdate) SetPromptID(id int) *ConversationUpdate {
	cu.mutation.SetPromptID(id)
	return cu
}

// SetNillablePromptID sets the "prompt" edge to the Prompt entity by ID if the given value is not nil.
func (cu *ConversationUpdate) SetNillablePromptID(id *int) *ConversationUpdate {
	if id != nil {
		cu = cu.SetPromptID(*id)
	}
	return cu
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (cu *ConversationUpdate) SetPrompt(p *Prompt) *ConversationUpdate {
	return cu.SetPromptID(p.ID)
}

// Mutation returns the ConversationMutation object of the builder.
func (cu *ConversationUpdate) Mutation() *ConversationMutation {
	return cu.mutation
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (cu *ConversationUpdate) ClearPrompt() *ConversationUpdate {
	cu.mutation.ClearPrompt()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConversationUpdate) check() error {
	if v, ok := cu.mutation.Messages(); ok {
		if err := conversation.MessagesValidator(v); err != nil {
			return &ValidationError{Name: "messages", err: fmt.Errorf(`ent: validator failed for field "Conversation.messages": %w`, err)}
		}
	}
	return nil
}

func (cu *ConversationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Messages(); ok {
		_spec.SetField(conversation.FieldMessages, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(conversation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(conversation.FieldUserID, field.TypeString, value)
	}
	if cu.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversation.PromptTable,
			Columns: []string{conversation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversation.PromptTable,
			Columns: []string{conversation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetMessages sets the "messages" field.
func (cuo *ConversationUpdateOne) SetMessages(s string) *ConversationUpdateOne {
	cuo.mutation.SetMessages(s)
	return cuo
}

// SetNillableMessages sets the "messages" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableMessages(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetMessages(*s)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ConversationUpdateOne) SetCreatedAt(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableCreatedAt(t *time.Time) *ConversationUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *ConversationUpdateOne) SetUserID(s string) *ConversationUpdateOne {
	cuo.mutation.SetUserID(s)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableUserID(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetUserID(*s)
	}
	return cuo
}

// SetPromptID sets the "prompt" edge to the Prompt entity by ID.
func (cuo *ConversationUpdateOne) SetPromptID(id int) *ConversationUpdateOne {
	cuo.mutation.SetPromptID(id)
	return cuo
}

// SetNillablePromptID sets the "prompt" edge to the Prompt entity by ID if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillablePromptID(id *int) *ConversationUpdateOne {
	if id != nil {
		cuo = cuo.SetPromptID(*id)
	}
	return cuo
}

// SetPrompt sets the "prompt" edge to the Prompt entity.
func (cuo *ConversationUpdateOne) SetPrompt(p *Prompt) *ConversationUpdateOne {
	return cuo.SetPromptID(p.ID)
}

// Mutation returns the ConversationMutation object of the builder.
func (cuo *ConversationUpdateOne) Mutation() *ConversationMutation {
	return cuo.mutation
}

// ClearPrompt clears the "prompt" edge to the Prompt entity.
func (cuo *ConversationUpdateOne) ClearPrompt() *ConversationUpdateOne {
	cuo.mutation.ClearPrompt()
	return cuo
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cuo *ConversationUpdateOne) Where(ps ...predicate.Conversation) *ConversationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversation entity.
func (cuo *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConversationUpdateOne) check() error {
	if v, ok := cuo.mutation.Messages(); ok {
		if err := conversation.MessagesValidator(v); err != nil {
			return &ValidationError{Name: "messages", err: fmt.Errorf(`ent: validator failed for field "Conversation.messages": %w`, err)}
		}
	}
	return nil
}

func (cuo *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Messages(); ok {
		_spec.SetField(conversation.FieldMessages, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(conversation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(conversation.FieldUserID, field.TypeString, value)
	}
	if cuo.mutation.PromptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversation.PromptTable,
			Columns: []string{conversation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PromptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversation.PromptTable,
			Columns: []string{conversation.PromptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prompt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
